import cPickle
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import os
import sys

import scipy.stats
import brewer2mpl
    
from config import config_list
    
np.set_printoptions(precision=3)
    
bmap = brewer2mpl.get_map('Dark2', 'qualitative', 6)
colors = bmap.mpl_colors

def stars(p):
    if p < 0.0001:
        return "****"
    elif (p < 0.001):
        return "***"
    elif (p < 0.01):
        return "**"
    elif (p < 0.05):
        return "*"
    else:
        return "-"
    

xp_name = "xp1"
d = "2016-02-28_13-54-46-TOOL2-iros_100T_14C_100K-xp1"

if os.environ.has_key("AVAKAS") and os.environ["AVAKAS"]:
    pref = ""
else:
    pref = "/home/sforesti/avakas"
    
log_dirs = {"xp1":pref + '/scratch/sforestier001/logs/' + d
}

    
log_dir = log_dirs[xp_name] + '/'





comp = {}
comp["obj1"] = {}
comp["obj2"] = {}



# 
# config_list = {"xp1":[
#                     "M-NN-RMB",
#                     "M-NN-LP-AMB",
#                     "M-LWLR-RMB",
#                     "M-LWLR-LP-AMB",
#                     "M-NN-RMB-ENVNOISE",
#                     "M-NN-LP-AMB-ENVNOISE",
#                     "M-LWLR-RMB-ENVNOISE",
#                     "M-LWLR-LP-AMB-ENVNOISE",
#                       ]}

trials = range(1, 101)

if False:
    ### RECOVER DATA
    for explo_config_name in config_list[xp_name]:
        print explo_config_name
        comp["obj1"][explo_config_name] = {}
        comp["obj2"][explo_config_name] = {}
        for trial in trials:
            print trial
            comp["obj1"][explo_config_name][trial] = {}
            comp["obj2"][explo_config_name][trial] = {}
            
            with open(log_dir + explo_config_name + '/analysis_comp_eval-{}.pickle'.format(trial), 'r') as f:
                comp_e_t = cPickle.load(f)
                
        
            for s_space in comp_e_t.keys():
                for regression_config_name in comp_e_t[s_space][explo_config_name][str(trial)].keys(): 
                    comp[s_space][explo_config_name][trial][regression_config_name] = comp_e_t[s_space][explo_config_name][str(trial)][regression_config_name]
                
                    
                
    
    ### STATS
                
    stats = {}
    stats_medians = {}
    
    for explo_config_name in config_list[xp_name]: 
        stats[explo_config_name] = {}
        stats_medians[explo_config_name] = {}
        for regression_config_name in comp[s_space][explo_config_name][trial].keys():
             
            list1_00000 = [c for trial in trials for c in comp["obj1"][explo_config_name][trial][regression_config_name][0]]
            list1_25000 = [c for trial in trials for c in comp["obj1"][explo_config_name][trial][regression_config_name][1]]
            list1_50000 = [c for trial in trials for c in comp["obj1"][explo_config_name][trial][regression_config_name][2]]
            list1_75000 = [c for trial in trials for c in comp["obj1"][explo_config_name][trial][regression_config_name][3]]
            list1_100000 = [c for trial in trials for c in comp["obj1"][explo_config_name][trial][regression_config_name][4]]
            
            list2_00000 = [c for trial in trials for c in comp["obj2"][explo_config_name][trial][regression_config_name][0]]
            list2_25000 = [c for trial in trials for c in comp["obj2"][explo_config_name][trial][regression_config_name][1]]
            list2_50000 = [c for trial in trials for c in comp["obj2"][explo_config_name][trial][regression_config_name][2]]
            list2_75000 = [c for trial in trials for c in comp["obj2"][explo_config_name][trial][regression_config_name][3]]
            list2_100000 = [c for trial in trials for c in comp["obj2"][explo_config_name][trial][regression_config_name][4]]
            
            
            merged_00000 = list1_00000 + list2_00000
    
            merged_25000 = list1_25000 + list2_25000
            merged_50000 = list1_50000 + list2_50000
            merged_75000 = list1_75000 + list2_75000
            merged_100000 = list1_100000 + list2_100000
            
            stats[explo_config_name][regression_config_name] = {}
            stats[explo_config_name][regression_config_name][0] = merged_00000
            stats[explo_config_name][regression_config_name][1] = merged_25000
            stats[explo_config_name][regression_config_name][2] = merged_50000
            stats[explo_config_name][regression_config_name][3] = merged_75000
            stats[explo_config_name][regression_config_name][4] = merged_100000
            
            stats_medians[explo_config_name][regression_config_name] = {}
            stats_medians[explo_config_name][regression_config_name][0] = np.median(merged_00000)
            stats_medians[explo_config_name][regression_config_name][1] = np.median(merged_25000)
            stats_medians[explo_config_name][regression_config_name][2] = np.median(merged_50000)
            stats_medians[explo_config_name][regression_config_name][3] = np.median(merged_75000)
            stats_medians[explo_config_name][regression_config_name][4] = np.median(merged_100000)
                
    
    with open(log_dir + 'stat_exploit.pickle', 'wb') as f:
        cPickle.dump(stats, f)
    with open(log_dir + 'stat_medians_exploit.pickle', 'wb') as f:
        cPickle.dump(stats_medians, f)
                
else:
              

    with open(log_dir + 'stat_exploit.pickle', 'r') as f:
        stats = cPickle.load(f)
        f.close()  
            
#     with open(log_dir + 'stat_medians_exploit.pickle', 'r') as f:
#         stats_medians = cPickle.load(f)
#         f.close()  
#             
# #print stats
#             
#             
# ### PRINT TABLE
#             
# 
# config_list = {"xp1":[
#                     "RmB",
#                     "F-NN",
#                     "F-LWLR",
#                     "M-NN-RMB",
#                     "M-NN-LP-AMB",
#                     "M-LWLR-RMB",
#                     "M-LWLR-LP-AMB"
#                       ]}
#             
# print stats_medians.keys()
# print 
# 
# 
#                     
# for explo_config_name in config_list['xp1']:
# 
#     exploit_config_name = "EXPLOIT-NN"
#     print "        \multirow{4}{*}{\scriptsize \\vspace{-0.3cm}" + explo_config_name + "} & ", "\multirow{2}{*}{\scriptsize No}", "& " + exploit_config_name[8:], " & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][1]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][2]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][3]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][4]), "$&\\\\[3pt]\\cline{3-7}"
#     exploit_config_name = "EXPLOIT-LWLR"
#     print "        & ", "& " + exploit_config_name[8:], " & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][1]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][2]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][3]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][4]), "$&\\\\[3pt]\\cline{2-7}"
#         
#     
#     explo_config_name = explo_config_name + "-ENVNOISE"
#     
#     exploit_config_name = "EXPLOIT-NN"
#     print "        & ", "\multirow{2}{*}{\scriptsize Yes}", "& " + exploit_config_name[8:], " & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][1]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][2]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][3]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][4]), "$&\\\\[3pt]\\cline{3-7}"
#     exploit_config_name = "EXPLOIT-LWLR"
#     print "        & ", "& " + exploit_config_name[8:], " & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][1]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][2]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][3]), "$ & $", "{0:.4f}".format(stats_medians[explo_config_name][exploit_config_name][4]), "$&\\\\[3pt]\\cline{2-7}"
#         
#     print "        " + "\hline"
            
    

    print
    print
    print "Question 1: Flat vs Modular"
    print
    
    for cdt1 in [#[EXPLO, EXPLOIT]
                ["F-NN", "EXPLOIT-NN"],
                ["F-LWLR", "EXPLOIT-NN"],
                ["F-NN", "EXPLOIT-LWLR"],
                ["F-LWLR", "EXPLOIT-LWLR"]
                ]:
        for cdt2 in [
                    ["M-NN-RMB", "EXPLOIT-NN"],
                    ["M-LWLR-RMB", "EXPLOIT-NN"],
                    ["M-NN-RMB", "EXPLOIT-LWLR"],
                    ["M-LWLR-RMB", "EXPLOIT-LWLR"]]:
                
            explo_config_name_1 = cdt1[0]
            explo_config_name_2 = cdt2[0]
            regression_config_name_1 = cdt1[1]
            regression_config_name_2 = cdt1[2]
            # the stars
            z, p = scipy.stats.mannwhitneyu(stats[explo_config_name_1][regression_config_name_1][4], 
                                            stats[explo_config_name_2][regression_config_name_2][4])
            p_value = p * 2
            print "Stat", cdt1, cdt2, z, p_value
            
    print 
    for cdt1 in [#[EXPLO, EXPLOIT]
                ["F-NN-ENVNOISE", "EXPLOIT-NN"],
                ["F-LWLR-ENVNOISE", "EXPLOIT-NN"],
                ["F-NN-ENVNOISE", "EXPLOIT-LWLR"],
                ["F-LWLR-ENVNOISE", "EXPLOIT-LWLR"]
                ]:
        for cdt2 in [
                    ["M-NN-RMB-ENVNOISE", "EXPLOIT-NN"],
                    ["M-LWLR-RMB-ENVNOISE", "EXPLOIT-NN"],
                    ["M-NN-RMB-ENVNOISE", "EXPLOIT-LWLR"],
                    ["M-LWLR-RMB-ENVNOISE", "EXPLOIT-LWLR"]]:
                
            explo_config_name_1 = cdt1[0]
            explo_config_name_2 = cdt2[0]
            regression_config_name_1 = cdt1[1]
            regression_config_name_2 = cdt1[2]
            # the stars
            z, p = scipy.stats.mannwhitneyu(stats[explo_config_name_1][regression_config_name_1][4], 
                                            stats[explo_config_name_2][regression_config_name_2][4])
            p_value = p * 2
            print "Stat", cdt1, cdt2, z, p_value
            
    
    print
    print
    print "Question 2: Random vs Active Model Babbling"
    print
    
    for cdt1 in [#[EXPLO, EXPLOIT]
                    ["M-NN-RMB", "EXPLOIT-NN"],
                    ["M-LWLR-RMB", "EXPLOIT-NN"],
                    ["M-NN-RMB", "EXPLOIT-LWLR"],
                    ["M-LWLR-RMB", "EXPLOIT-LWLR"]]:
        for cdt2 in [
                    ["M-NN-LP-AMB", "EXPLOIT-NN"],
                    ["M-LWLR-LP-AMB", "EXPLOIT-NN"],
                    ["M-NN-LP-AMB", "EXPLOIT-LWLR"],
                    ["M-LWLR-LP-AMB", "EXPLOIT-LWLR"]]:
                
            explo_config_name_1 = cdt1[0]
            explo_config_name_2 = cdt2[0]
            regression_config_name_1 = cdt1[1]
            regression_config_name_2 = cdt2[1]
            # the stars
            z, p = scipy.stats.mannwhitneyu(stats[explo_config_name_1][regression_config_name_1][4], 
                                            stats[explo_config_name_2][regression_config_name_2][4])
            p_value = p * 2
            print "Stat", cdt1, cdt2, z, p_value
            
    print 
                
    print
    print
    print "Question 3: NN vs LWLR"
    print
    
    explo_config_name_1 = "M-LWLR-LP-AMB"
    regression_config_name_1 = "EXPLOIT-NN"
    
    explo_config_name_2 = "M-LWLR-LP-AMB"
    regression_config_name_2 = "EXPLOIT-LWLR"
    
    z, p = scipy.stats.mannwhitneyu(stats[explo_config_name_1][regression_config_name_1][4], 
                                    stats[explo_config_name_2][regression_config_name_2][4])
    p_value = p * 2
    print "Stat", regression_config_name_1, regression_config_name_2, z, p_value
                
